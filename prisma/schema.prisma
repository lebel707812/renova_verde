generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String?
  role       String   @default("user")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Author {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  bio         String?
  avatar      String?
  social_links Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  articles Article[]

  @@map("authors")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  articles Article[]

  @@map("categories")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  articles Article[]

  @@map("tags")
}

model Article {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  content      String
  excerpt      String?
  featured_image String?
  status       String   @default("draft") // draft, published
  views        Int      @default(0)
  likes        Int      @default(0)
  reading_time Int?
  meta_title   String?
  meta_description String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  published_at DateTime?

  category_id Int?
  author_id   Int?

  category Category? @relation(fields: [category_id], references: [id])
  author   Author?   @relation(fields: [author_id], references: [id])
  tags     Tag[]

  @@map("articles")
}

model Newsletter {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  subscribed Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("newsletter")
}

